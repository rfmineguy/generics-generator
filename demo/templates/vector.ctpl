#include "vector_T.h"
#include "vector_T_spec.c"
#include <assert.h>
#include <stdlib.h>

vec_T vec_T_create() {
	vec_T dyn_array = {.data = 0, .capacity = 10, .size = 0};
	return dyn_array;
}

void vec_T_reserve_if_needed(vec_T* arr, int capacity) {
	if (arr->size + 1 >= arr->capacity) {
		arr->data = REALLOC(arr->data, capacity);
		arr->capacity = capacity;
	}
}

void vec_T_pushback (vec_T* arr, T val) {
	vec_T_reserve_if_needed(arr, arr->capacity * 2);
	arr->data[arr->size++] = val;
}

void vec_T_pushfront(vec_T* arr, T val) {
	vec_T_reserve_if_needed(arr, arr->capacity * 2);
	assert(arr->size + 1 <= arr->capacity && "Not enough space to pushfront");
	for (int i = 0; i < arr->size; i++) {
		arr->data[i + 1] = arr->data[i];
	}
	arr->data[0] = val;
	arr->size++;
}

void vec_T_popback(vec_T* arr) {
	for (int i = 0; i < arr->size; i++) {
		arr->data[i] = arr->data[i + 1];
	}
	arr->size--;
}

void vec_T_popfront (vec_T* arr) {
	for (int i = 1; i < arr->size; i++) {
		arr->data[i - 1] = arr->data[i];
	}
	arr->size--;
}

T vec_T_peekfront(vec_T* arr) {
	assert(arr->size == 0 && "Dynamic array size 0. Can't peekfront.");
	return arr->data[0];
}

T vec_T_peekback(vec_T* arr) {
	assert(arr->size == 0 && "Dynamic array size 0. Can't peekfront.");
	return arr->data[arr->size - 1];
}

void vec_T_print(vec_T* arr) {
	for (int i = 0; i < arr->size; i++) {
		vec_T_print_T(arr->data[i]);
	}
}

T* vec_T_get(vec_T* arr, T v) {
	for (int i = 0; i < arr->size; i++) {
		if (vec_T_cmp(arr->data[i], v) == 0) {
			return &arr->data[i];
		}
	}
	return (void*)0;
}
